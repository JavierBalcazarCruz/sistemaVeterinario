import { useState, useEffect } from 'react';
import { Menu, X, Phone, Mail, MapPin, User, Plus, Stethoscope, PawPrint, Calendar, Weight , Edit, EllipsisVertical,ArrowLeft  } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import "../assets/datosPacientes/styles/style.css";
import '../assets/homeScreen/styles/style.css';
import usePacientes from "../hooks/usePacientes";
import Swal from "sweetalert2";
import cVacios from "../assets/registrarPaciente/images/CamposVacios.png";
import registroOk from "../assets/registrarPaciente/images/pacienteRegistrado.jpg";
const DatosPacientes = () => {
  const { pacientes, guardarPaciente,eliminarPacientes } = usePacientes();
  const [contacts, setContacts] = useState([]);
  const [selectedContact, setSelectedContact] = useState(null);
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [isMobile, setIsMobile] = useState(window.innerWidth < 1024);
  const [searchTerm, setSearchTerm] = useState('');

  const formatearFecha = (fecha) => {
    if (!fecha) return 'No disponible';
    const nuevaFecha = new Date(fecha);
    if (isNaN(nuevaFecha.getTime())) return 'Fecha inv√°lida';
    
    // Ajustamos la fecha para que siempre se muestre en la zona horaria local
    const fechaLocal = new Date(nuevaFecha.getTime() + nuevaFecha.getTimezoneOffset() * 60000);
    return new Intl.DateTimeFormat('es-MX', { 
      dateStyle: 'long',
      timeZone: 'UTC'  // Esto asegura que la fecha se interprete como UTC
    }).format(fechaLocal);
  };

  const navigate = useNavigate();
  
  useEffect(() => {
    setContacts(pacientes);
  }, [pacientes]);

  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth < 1024);
    };
    const handleClickOutside = (event) => {
      if (selectedContact && isMenuOpen && !document.querySelector('.contacts-list').contains(event.target)) {
        setIsMenuOpen(false);
      }
    };

    window.addEventListener('resize', handleResize);
    document.addEventListener('mousedown', handleClickOutside);

    return () => {
      window.removeEventListener('resize', handleResize);
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isMenuOpen, selectedContact]);

  const toggleMenu = () => {
    setIsMenuOpen(!isMenuOpen);
  };

  const selectContact = (contact) => {
    setSelectedContact(contact);
    if (isMobile) {
      setIsMenuOpen(false);
    }
  };

  const filteredContacts = contacts.filter(contact =>
    contact.nombreMascota.toLowerCase().includes(searchTerm.toLowerCase()) ||
    contact.propietario.toLowerCase().includes(searchTerm.toLowerCase()) ||
    contact.raza.toLowerCase().includes(searchTerm.toLowerCase()) ||
    contact.color.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [editingType, setEditingType] = useState(null);
  const [isClosing, setIsClosing] = useState(false);
  
  const openEditModal = (type) => {
    setEditingType(type);
    setIsEditModalOpen(true);
    setIsClosing(false);
  };

  const closeEditModal = () => {
    setIsClosing(true);
    setTimeout(() => {
      setIsEditModalOpen(false);
      setEditingType(null);
      setIsClosing(false);
    }, 500);
  };

  const mostrarAlerta = (titulo, texto, rutaImg, altImg) => {
    Swal.fire({
      title: titulo,
      text: texto,
      imageUrl: rutaImg,
      imageAlt: altImg,
    });
  };
const mostrarAlertaEliminar = (titulo, texto, rutaImg, altImg, onConfirm) => {
  Swal.fire({
    title: titulo,
    text: texto,
    imageUrl: rutaImg,
    imageAlt: altImg,
    showCancelButton: true,
    confirmButtonColor: '#3085d6',
    cancelButtonColor: '#d33',
    confirmButtonText: 'S√≠, eliminar',
    cancelButtonText: 'Cancelar',
  
   
  
  }).then((result) => {
    if (result.isConfirmed) {
      onConfirm();
    }
  });
};
const handleEllipsisClick = (e, contact) => {
  e.stopPropagation();
  mostrarAlertaEliminar(
    "‚ö†Ô∏è ¬øEst√°s seguro de eliminar este registro? ‚ö†Ô∏è",
    `¬øDeseas eliminar el registro de ${contact.nombreMascota}?`,
    cVacios,
    "Gato observ√°ndote porque est√°s a punto de eliminar un registro",
    () => {
      eliminarPacientes(contact._id);
      // Actualiza el estado local despu√©s de eliminar
      setContacts(prevContacts => prevContacts.filter(c => c._id !== contact._id));
      if (selectedContact && selectedContact._id === contact._id) {
        setSelectedContact(null);
      }
      Swal.fire(
        '¬°Paciente eliminado!',
        'El registro ha sido eliminado exitosamente',
        'success'
      );
    }
  );
};

  const handleSubmit = (e, updatedData) => {
    e.preventDefault();
    const { _id, propietario, celular, telefonoCasa, email, colonia, color, direccion, edad, especie, estado, fechaNacimiento, nombreMascota, peso, raza } = updatedData;
    if (
      [
        _id, propietario, celular, telefonoCasa, email, colonia, color, direccion, edad, especie, estado, fechaNacimiento, nombreMascota, peso, raza
      ].includes("")
    ) {
      mostrarAlerta(
        "‚ö†Ô∏è Los campos se encuentran vacios ‚ö†Ô∏è",
        "Alguno de los campos se encuentran vacios revisa la informaci√≥n que ingresaste.",
        cVacios,
        "Gato observ√°ndote porque est√°n vac√≠os los campos"
      );
      return;
    }

    guardarPaciente({ _id, propietario, celular, telefonoCasa, email, colonia, color, direccion, edad, especie, estado, fechaNacimiento, nombreMascota, peso, raza })
    mostrarAlerta(
      "üéâ Actualizaci√≥n exitosa üéâ",
      "La informaci√≥n del paciente ha sido actualizada",
      registroOk,
      "Actualizaci√≥n exitosa"
    );
    closeEditModal();
  };

  const mexicanStates = [
    'Aguascalientes', 'Baja California', 'Baja California Sur', 'Campeche', 'Chiapas',
    'Chihuahua', 'Ciudad de M√©xico', 'Coahuila', 'Colima', 'Durango', 'Estado de M√©xico',
    'Guanajuato', 'Guerrero', 'Hidalgo', 'Jalisco', 'Michoac√°n', 'Morelos', 'Nayarit',
    'Nuevo Le√≥n', 'Oaxaca', 'Puebla', 'Quer√©taro', 'Quintana Roo', 'San Luis Potos√≠',
    'Sinaloa', 'Sonora', 'Tabasco', 'Tamaulipas', 'Tlaxcala', 'Veracruz', 'Yucat√°n', 'Zacatecas'
  ];

  const EditModal = ({ type }) => {
    const [formData, setFormData] = useState({
      _id: '',
      propietario: '',
      celular: '',
      telefonoCasa: '',
      email: '',
      direccion: '',
      colonia: '',
      estado: '',
      nombreMascota: '',
      especie: '',
      fechaNacimiento: '',
      raza: '',
      color: '',
      edad: '',
      peso: '',
      cPostal: '',
    });

    useEffect(() => {
      if (selectedContact) {
        setFormData({
          _id: selectedContact._id,
          propietario: selectedContact.propietario || '',
          celular: selectedContact.celular || '',
          telefonoCasa: selectedContact.telefonoCasa || '',
          email: selectedContact.email || '',
          direccion: selectedContact.direccion || '',
          colonia: selectedContact.colonia || '',
          estado: selectedContact.estado || '',
          nombreMascota: selectedContact.nombreMascota || '',
          especie: selectedContact.especie || '',
          fechaNacimiento: selectedContact.fechaNacimiento 
            ? new Date(new Date(selectedContact.fechaNacimiento).getTime() + new Date().getTimezoneOffset() * 60000).toISOString().split('T')[0]
            : '',
          raza: selectedContact.raza || '',
          color: selectedContact.color || '',
          edad: selectedContact.edad || '',
          peso: selectedContact.peso || '',
          cPostal: selectedContact.cPostal || '',
        });
      }
    }, [type, selectedContact]);

    const handleChange = (e) => {
      const { name, value } = e.target;
      if (name === 'celular' || name === 'telefonoCasa') {
        const numericValue = value.replace(/\D/g, '').slice(0, 10);
        setFormData(prevData => ({
          ...prevData,
          [name]: numericValue,
        }));
      } else {
        setFormData(prevData => ({
          ...prevData,
          [name]: value,
        }));
      }
    };

    const handleFormSubmit = (e) => {
      const updatedData = { ...formData };
      handleSubmit(e, updatedData);
    };

   

    return (
      <div className={`edit-modal ${isEditModalOpen && !isClosing ? 'open' : ''} ${isClosing ? 'closing' : ''}`}>
        <div className="modal-content">
          <h2>Editar {type === 'owner' ? 'Informaci√≥n del Due√±o' : 'Informaci√≥n de la Mascota'}</h2>
          <form onSubmit={handleFormSubmit}>
            {type === 'owner' ? (
              <>
                <div className="input-group">
                  <label htmlFor="propietario">Nombre del due√±o</label>
                  <User size={20} />
                  <input
                    id="propietario"
                    name="propietario"
                    type="text"
                    placeholder="Due√±o"
                    value={formData.propietario}
                    onChange={handleChange}
                    required
                  />
                </div>
                <div className="input-group">
                  <label htmlFor="celular">Celular</label>
                  <Phone size={20} />
                  <input
                    id="celular"
                    name="celular"
                    type="tel"
                    placeholder="Celular"
                    value={formData.celular}
                    onChange={handleChange}
                    required
                  />
                </div>
                <div className="input-group">
                  <label htmlFor="telefonoCasa">Tel√©fono de casa</label>
                  <Phone size={20} />
                  <input
                    id="telefonoCasa"
                    name="telefonoCasa"
                    type="tel"
                    placeholder="Tel√©fono de casa"
                    value={formData.telefonoCasa}
                    onChange={handleChange}
                  />
                </div>
                <div className="input-group">
                  <label htmlFor="email">Email</label>
                  <Mail size={20} />
                  <input
                    id="email"
                    name="email"
                    type="email"
                    placeholder="Email"
                    value={formData.email}
                    onChange={handleChange}
                  />
                </div>
                <div className="input-group">
                  <label htmlFor="direccion">Domicilio</label>
                  <MapPin size={20} />
                  <input
                    id="direccion"
                    name="direccion"
                    type="text"
                    placeholder="Domicilio"
                    value={formData.direccion}
                    onChange={handleChange}
                  />
                </div>
                <div className="input-group">
                  <label htmlFor="colonia">Colonia</label>
                  <MapPin size={20} />
                  <input
                    id="colonia"
                    name="colonia"
                    type="text"
                    placeholder="Colonia"
                    value={formData.colonia}
                    onChange={handleChange}
                  />
                </div>
                <div className="input-group">
                  <label htmlFor="estado">Estado</label>
                  <MapPin size={20} />
                  <select
                    id="estado"
                    name="estado"
                    value={formData.estado}
                    onChange={handleChange}
                    required
                  >
                    <option value="" disabled>Selecciona un estado</option>
                    {mexicanStates.map((state) => (
                      <option key={state} value={state}>{state}</option>
                    ))}
                  </select>
                </div>
                {/*
                <div className="input-group">
                  <label htmlFor="cPostal">C√≥digo Postal</label>
                  <MapPin size={20} />
                  <input
                    id="cPostal"
                    name="cPostal"
                    type="text"
                    placeholder="C√≥digo Postal"
                    value={formData.cPostal}
                    onChange={handleChange}
                    maxLength={5}
                    pattern="\d{5}"
                    title="El c√≥digo postal debe contener 5 d√≠gitos"
                  />
                </div>
                */}

              </>
            ) : (
              <>
                <div className="input-group">
                  <label htmlFor="nombreMascota">Mascota</label>
                  <PawPrint size={20} />
                  <input
                    id="nombreMascota"
                    name="nombreMascota"
                    type="text"
                    placeholder="Nombre de la mascota"
                    value={formData.nombreMascota}
                    onChange={handleChange}
                    required
                  />
                </div>
                <div className="input-group">
                  <label htmlFor="especie">Especie</label>
                  <Stethoscope size={20} />
                  <input
                    id="especie"
                    name="especie"
                    type="text"
                    placeholder="Especie"
                    value={formData.especie}
                    onChange={handleChange}
                    required
                  />
                </div>
                <div className="input-group">
                  <label htmlFor="fechaNacimiento">Fecha de nacimiento</label>
                  <Calendar size={20} />
                  <input
                    id="fechaNacimiento"
                    name="fechaNacimiento"
                    type="date"
                    placeholder="Fecha de nacimiento"
                    value={formData.fechaNacimiento}
                    onChange={handleChange}
                  />
                </div>
                <div className="input-group">
                  <label htmlFor="raza">Raza</label>
                  <PawPrint size={20} />
                  <input
                    id="raza"
                    name="raza"
                    type="text"
                    placeholder="Raza"
                    value={formData.raza}
                    onChange={handleChange}
                  />
                </div>
                <div className="input-group">
                  <label htmlFor="color">Color</label>
                  <PawPrint size={20} />
                  <input
                    id="color"
                    name="color"
                    type="text"
                    placeholder="Color"
                    value={formData.color}
                    onChange={handleChange}
                  />
                </div>
                <div className="input-group">
                  <label htmlFor="edad">Edad</label>
                  <Calendar size={20} />
                  <input
                    id="edad"
                    name="edad"
                    type="number"
                    placeholder="Edad"
                    value={formData.edad}
                    onChange={handleChange}
                    min="0"
                  />
                </div>
                <div className="input-group">
                  <label htmlFor="peso">Peso</label>
                  <Weight size={20} />
                  <input
                    id="peso"
                    name="peso"
                    type="number"
                    placeholder="Peso"
                    value={formData.peso}
                    onChange={handleChange}
                    min="0"
                  />
                </div>
              </>
            )}
            <div className="modal-actions">
              <button type="button" onClick={closeEditModal}>Cancelar</button>
              <button type="submit">Guardar</button>
            </div>
          </form>
        </div>
      </div>
    );
  };
  useEffect(() => {
    // Actualiza el contacto seleccionado si el paciente ha sido editado
    if (selectedContact) {
      const updatedContact = pacientes.find(contact => contact._id === selectedContact._id);
      if (updatedContact) {
        setSelectedContact(updatedContact);
      }
    }
  }, [pacientes, selectedContact]);
  return (
    <div className={`full-height-container background-cover ${isEditModalOpen ? 'blur-background' : ''}`}>
      <div className="veterinary-contacts">
        {isMobile && (
          <button className="menu-button" onClick={toggleMenu}>
            {isMenuOpen ? <X size={18} /> : <Menu size={24} />}
          </button>
        )}
      <div className={`contacts-list ${isMobile && isMenuOpen ? 'open' : ''}`}>
        <div className="contacts-header">
          <button to="/admin" className="back-button" onClick={() => navigate('/admin')}>
            <ArrowLeft size={24} />
          </button>
          <h2 className='titPacientes'>Pacientes</h2>
          <button className="add-contact" onClick={() => navigate('/admin/registro-cliente')}>
            <Plus size={24} />
          </button>
        </div>
          <input
            type="text"
            placeholder="Buscar paciente"
            className="search-input"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
{filteredContacts.map((contact) => (
  <div
    key={contact._id}
    className={`contact-item ${selectedContact && selectedContact._id === contact._id ? 'selected' : ''}`}
  >
    <div className="contact-content" onClick={() => selectContact(contact)}>
      <div className="contact-avatar">
        {contact.especie.toLowerCase() === 'perro' ? (
          <img src="https://pampermut.com/blog/wp-content/uploads/2020/05/Como-es-el-caracter-de-tu-perro-segun-su-horoscopo-scaled.jpg" alt="Perro Avatar" />
        ) : (
          <img src="https://s1.elespanol.com/2020/05/18/como/gatos-mascotas-trucos_490961518_152142875_1706x960.jpg" alt="Cat Avatar" />
        )}
      </div>
      <div className="contact-info">
        <div className="contact-name">{contact.nombreMascota}</div>
        <div className="contact-species">{contact.especie} - {contact.raza}</div>
      </div>
    </div>
    <div className="contact-actions">
      <EllipsisVertical 
        size={20} 
        className="ellipsis-icon" 
        onClick={(e) => {
          e.stopPropagation();
          handleEllipsisClick(e, contact);
        }}
      />
    </div>
  </div>
))}
        </div>
        <div className={`contact-details ${selectedContact ? 'open' : ''}`}>
          {selectedContact ? (
            <>
              <div className="contact-header">
                <div className="contact-avatar large">
                  <img
                    src={
                      selectedContact.especie.toLowerCase() === 'perro'
                        ? 'https://pampermut.com/blog/wp-content/uploads/2020/05/Como-es-el-caracter-de-tu-perro-segun-su-horoscopo-scaled.jpg'
                        : 'https://s1.elespanol.com/2020/05/18/como/gatos-mascotas-trucos_490961518_152142875_1706x960.jpg'
                    }
                    alt={selectedContact.especie}
                  />
                </div>
                <h2>{selectedContact.nombreMascota}</h2>
              </div>
              <div className="contact-info-details">
                <div className="widgets">
                  <div className="widget">
                    <div className="widget-header">
                      <h2 className='tit-datosPacientes'>Informaci√≥n del Due√±o</h2>
                      <Edit size={20} className="edit-icon" onClick={() => openEditModal('owner')} />
                    </div>
                    <div className="info-item">
                      <User size={20} />
                      <span><strong>Due√±o:</strong> {selectedContact.propietario}</span>
                    </div>
                    <div className="info-item">
                      <Phone size={20} />
                      <span><strong>Celular:</strong> {selectedContact.celular}</span>
                    </div>
                    <div className="info-item">
                      <Phone size={20} />
                      <span><strong>Tel√©fono de casa:</strong> {selectedContact.telefonoCasa}</span>
                    </div>
                    <div className="info-item">
                      <Mail size={20} />
                      <span><strong>Email:</strong> {selectedContact.email}</span>
                    </div>  
                    <div className="info-item">
                      <MapPin size={20} />
                      <span><strong>Direcci√≥n:</strong> {selectedContact.direccion}</span>         
                    </div>
                    <div className="info-item">
                      <MapPin size={20} />
                      <span><strong>Estado:</strong> {selectedContact.estado}</span>
                    </div>
                    <div className="info-item">
                      <MapPin size={20} />
                      <span><strong>Colonia:</strong> {selectedContact.colonia}</span>
                    </div>    
                  {/* 
                    <div className="info-item">
                      <MapPin size={20} />
                      <span><strong>Codigo postal:</strong> {selectedContact.cPostal}</span>
                    </div>
                    */}

                    <br />                   
                  </div>
                  <div className="widget">
                    <div className="widget-header">
                      <h2 className='tit-datosPacientes'>Informaci√≥n de la mascota</h2>
                      <Edit size={20} className="edit-icon" onClick={() => openEditModal('pet')} />
                    </div>
                    <div className="info-item">
                      <PawPrint size={20} />
                      <span><strong>Nombre:</strong> {selectedContact.nombreMascota}</span>
                    </div>
                    <div className="info-item">
                      <Stethoscope size={20} />
                      <span><strong>Especie:</strong> {selectedContact.especie}</span>
                    </div>
                    <div className="info-item">
                      <Calendar size={20} />
                      <span><strong>Fecha de nacimiento:</strong> {formatearFecha(selectedContact.fechaNacimiento)}</span>
                    </div>
                    <div className="info-item">
                      <PawPrint size={20} />
                      <span><strong>Raza:</strong> {selectedContact.raza}</span>
                    </div>
                    <div className="info-item">
                      <PawPrint size={20} />
                      <span><strong>Color:</strong> {selectedContact.color}</span>
                    </div>
                    <div className="info-item">
                      <Calendar size={20} />
                      <span><strong>Edad:</strong> {selectedContact.edad} a√±os</span>
                    </div>
                    <div className="info-item">
                      <Weight size={20} />
                      <span><strong>Peso:</strong> {selectedContact.peso} kg</span>
                    </div>  
                    <br />
                  </div>
                  <div className="widget">
                    <h2 className='tit-datosPacientes'>Informaci√≥n reciente de la mascota</h2>
                  </div>        
                </div>
              </div>
            </>
          ) : (
            <div className="no-selection">
              { pacientes.length ? 
                (
                  <>
                    <h2>Listado de pacientes</h2>
                    <p className='tit-datosPacientes'>Administra tus pacientes </p>
                  </>
                ):
                (
                  <>
                    <h2>No hay pacientes</h2>
                    <p>Comienza agregando pacientes y aparecer√°n en este lugar</p>
                  </>
                )
              }
            </div>
          )}
        </div>
      </div>
      {isEditModalOpen && <EditModal type={editingType} />}
    </div>
  );
};

export default DatosPacientes;
